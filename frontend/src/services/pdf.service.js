import jsPDF from 'jspdf';
import 'jspdf-autotable';

export const generateTasksPDF = (tasks, userData) => {
  // Initialize PDF document
  const doc = new jsPDF();
  const pageWidth = doc.internal.pageSize.width;
  
  // Add title
  doc.setFontSize(20);
  doc.text('Task Management System - Tasks Report', pageWidth / 2, 15, { align: 'center' });
  
  // Add report metadata
  doc.setFontSize(10);
  doc.text(`Generated on: ${new Date().toLocaleString()}`, 14, 25);
  doc.text(`Generated by: ${userData?.name || 'Admin User'}`, 14, 30);
  
  // Add task summary
  const totalTasks = tasks.length;
  const completedTasks = tasks.filter(task => task.status === 'Done').length;
  const pendingTasks = tasks.filter(task => task.status === 'Pending').length;
  const inProgressTasks = tasks.filter(task => task.status === 'In Progress').length;
  
  doc.setFontSize(12);
  doc.text('Task Summary:', 14, 40);
  doc.text(`Total Tasks: ${totalTasks}`, 20, 46);
  doc.text(`Completed: ${completedTasks}`, 20, 52);
  doc.text(`Pending: ${pendingTasks}`, 20, 58);
  doc.text(`In Progress: ${inProgressTasks}`, 20, 64);
  
  // Format tasks data for table
  const tableData = tasks.map(task => [
    task.title,
    task.assignedTo,
    new Date(task.deadline).toLocaleDateString(),
    task.status
  ]);
  
  // Add task table
  doc.autoTable({
    startY: 70,
    head: [['Title', 'Assigned To', 'Deadline', 'Status']],
    body: tableData,
    headStyles: { fillColor: [75, 85, 199] },
    alternateRowStyles: { fillColor: [240, 240, 255] },
    margin: { top: 70 }
  });
  
  // Add footer
  const pageCount = doc.internal.getNumberOfPages();
  for (let i = 1; i <= pageCount; i++) {
    doc.setPage(i);
    doc.setFontSize(8);
    doc.text(
      'Task Management System - Generated Report',
      pageWidth / 2,
      doc.internal.pageSize.height - 10,
      { align: 'center' }
    );
    doc.text(`Page ${i} of ${pageCount}`, pageWidth - 20, doc.internal.pageSize.height - 10);
  }
  
  return doc;
};

export const downloadTasksPDF = (tasks, userData) => {
  const doc = generateTasksPDF(tasks, userData);
  doc.save(`tasks-report-${new Date().toISOString().split('T')[0]}.pdf`);
};

export default {
  generateTasksPDF,
  downloadTasksPDF
};